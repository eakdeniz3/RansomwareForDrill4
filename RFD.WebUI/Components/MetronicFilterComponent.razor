<div class="d-flex align-items-center py-1">
    <div id="@Id" tabindex="100" class="me-4" onfocusout="SelectClose('@Id')">
        <a @onclick="async ()=>{IsPopupVisible=!IsPopupVisible; if(IsPopupVisible)await Show();}" class="btn btn-sm btn-flex btn-light btn-active-primary fw-bolder show menu-dropdown">
            <span class="svg-icon svg-icon-5 svg-icon-gray-500 me-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path d="M19.0759 3H4.72777C3.95892 3 3.47768 3.83148 3.86067 4.49814L8.56967 12.6949C9.17923 13.7559 9.5 14.9582 9.5 16.1819V19.5072C9.5 20.2189 10.2223 20.7028 10.8805 20.432L13.8805 19.1977C14.2553 19.0435 14.5 18.6783 14.5 18.273V13.8372C14.5 12.8089 14.8171 11.8056 15.408 10.964L19.8943 4.57465C20.3596 3.912 19.8856 3 19.0759 3Z" fill="black"></path>
                </svg>
            </span>
            Filtrele
        </a>
        @if (IsPopupVisible)
        {
            <div class="menu menu-sub menu-sub-dropdown w-250px w-md-300px show" style="z-index: 105; position: absolute; inset: 0px 0px auto auto; margin: 0px; transform: translate(0px, 55px);">
                @Body
                
              
            </div>

        }


    </div>
</div>

@code {
    [Inject]
    public IJSRuntime JsRuntime { get; set; }
     [Parameter]
        public RenderFragment? Body { get; set; }
    string _id;
    [Parameter]
    public string Id
    {
        get => _id ?? $"{uid}";
        set => _id = value;
    }

    readonly string uid = Guid.NewGuid().ToString().ToLower().Replace("-", "");
    [Parameter]
    public bool IsPopupVisible { get; set; }

    protected override async Task OnInitializedAsync()
    { //await OnInitAsync();
        await JsRuntime.InvokeVoidAsync("outsideClickHandler.addEvent", Id, DotNetObjectReference.Create(this));

    }


    [JSInvokable("MetronicPopupClose")]
    public void ClosePopup()
    {
        IsPopupVisible = false;
        StateHasChanged();
        // IsPopupVisible = false;
    }

    public async Task Show()
    {
        await JsRuntime.InvokeVoidAsync(
            "eval",
           $"document.getElementById('{Id.ToString()}').focus();");
    }


    

}